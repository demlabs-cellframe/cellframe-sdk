#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∏–∫—Å–µ—Ä JSON API –º–∏–≥—Ä–∞—Ü–∏–∏
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞–∂–¥–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–æ—á–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
"""
import os
import re
import subprocess

def get_all_warnings():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    # –ß–∏—Å—Ç–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞
    subprocess.run(["make", "clean"], cwd="/home/naeper/work/python-cellframe/cellframe-sdk/build")
    
    result = subprocess.run(
        ["make", "-j4"], 
        cwd="/home/naeper/work/python-cellframe/cellframe-sdk/build",
        capture_output=True, text=True
    )
    
    warnings = []
    for line in result.stderr.split('\n'):
        if 'warning:' in line:
            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            match = re.match(r'([^:]+):(\d+):\d+: warning: (.+)', line)
            if match:
                file_path, line_num, message = match.groups()
                warnings.append({
                    'file': file_path,
                    'line': int(line_num),
                    'message': message,
                    'original_line': line
                })
    return warnings

def analyze_warning_types(warnings):
    """–ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    types = {}
    for w in warnings:
        msg = w['message']
        if 'incompatible pointer type' in msg:
            if 'dap_json_object_add_object' in msg:
                types['add_object_wrong_type'] = types.get('add_object_wrong_type', 0) + 1
            elif 'dap_json_array_add' in msg:
                types['array_add_wrong_type'] = types.get('array_add_wrong_type', 0) + 1
            elif 'initialization' in msg:
                types['init_wrong_type'] = types.get('init_wrong_type', 0) + 1
            else:
                types['other_incompatible'] = types.get('other_incompatible', 0) + 1
        elif 'implicit declaration' in msg:
            types['implicit_declaration'] = types.get('implicit_declaration', 0) + 1
        else:
            types['other'] = types.get('other', 0) + 1
    return types

def create_mass_fix_commands(warning_types):
    """–°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –º–∞—Å—Å–æ–≤–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
    commands = []
    
    if warning_types.get('add_object_wrong_type', 0) > 0:
        # –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–º–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö dap_json_object_add_object
        commands.extend([
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–∑–æ–≤–æ–≤ —Å json_object_new_* —Ñ—É–Ω–∫—Ü–∏—è–º–∏
            r"find modules/ -name '*.c' -exec sed -i 's/dap_json_object_add_object(\([^,]*\), \([^,]*\), json_object_new_string(\([^)]*\)))/dap_json_object_add_string(\1, \2, \3)/g' {} \;",
            r"find modules/ -name '*.c' -exec sed -i 's/dap_json_object_add_object(\([^,]*\), \([^,]*\), json_object_new_int(\([^)]*\)))/dap_json_object_add_int(\1, \2, \3)/g' {} \;",
            r"find modules/ -name '*.c' -exec sed -i 's/dap_json_object_add_object(\([^,]*\), \([^,]*\), json_object_new_uint64(\([^)]*\)))/dap_json_object_add_uint64(\1, \2, \3)/g' {} \;",
            r"find modules/ -name '*.c' -exec sed -i 's/dap_json_object_add_object(\([^,]*\), \([^,]*\), json_object_new_bool(\([^)]*\)))/dap_json_object_add_bool(\1, \2, \3)/g' {} \;",
        ])
    
    if warning_types.get('array_add_wrong_type', 0) > 0:
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–ª—è dap_json_array_add
        commands.append(r"find modules/ -name '*.c' -exec sed -i 's/json_object\*/dap_json_t*/g' {} \;")
    
    if warning_types.get('init_wrong_type', 0) > 0:
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        commands.extend([
            r"find modules/ -name '*.c' -exec sed -i 's/json_object \*\([a-z_][a-zA-Z0-9_]*\) = dap_json_/dap_json_t *\1 = dap_json_/g' {} \;",
            r"find modules/ -name '*.c' -exec sed -i 's/json_object\* \([a-z_][a-zA-Z0-9_]*\) = dap_json_/dap_json_t* \1 = dap_json_/g' {} \;",
        ])
    
    return commands

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
print("üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π...")
warnings = get_all_warnings()
print(f"–ù–∞–π–¥–µ–Ω–æ {len(warnings)} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")

warning_types = analyze_warning_types(warnings)
print(f"–¢–∏–ø—ã –ø—Ä–æ–±–ª–µ–º: {warning_types}")

commands = create_mass_fix_commands(warning_types)
print(f"–°–æ–∑–¥–∞–Ω–æ {len(commands)} –∫–æ–º–∞–Ω–¥ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ —Ñ–∞–π–ª –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
with open('/home/naeper/work/python-cellframe/cellframe-sdk/mass_fix_commands.sh', 'w') as f:
    f.write("#!/bin/bash\n")
    f.write("# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –º–∞—Å—Å–æ–≤–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n")
    for cmd in commands:
        f.write(f"{cmd}\n")

print("–ö–æ–º–∞–Ω–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ mass_fix_commands.sh")
print("–ì–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –º–∞—Å—Å–æ–≤—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π!")
