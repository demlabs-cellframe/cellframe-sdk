#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ñ–∏–∫—Å–µ—Ä —Ç–∏–ø–æ–≤ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
–†–∞–±–æ—Ç–∞–µ—Ç —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ —Ç–∏–ø–æ–≤
"""
import subprocess
import re

def count_warnings():
    subprocess.run(["make", "clean"], cwd="build")
    result = subprocess.run(["make", "-j4"], cwd="build", capture_output=True, text=True)
    return len([line for line in result.stderr.split('\n') if 'warning:' in line])

def check_build():
    result = subprocess.run(["make", "-j4"], cwd="build", capture_output=True)
    return result.returncode == 0

def get_warning_samples():
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞–∑—Ü—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    subprocess.run(["make", "clean"], cwd="build")
    result = subprocess.run(["make", "-j4"], cwd="build", capture_output=True, text=True)
    warnings = [line for line in result.stderr.split('\n') if 'warning:' in line]
    return warnings[:10]  # –ü–µ—Ä–≤—ã–µ 10 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

def safe_batch_fix(commands, description):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –∫–æ–º–∞–Ω–¥"""
    print(f"üîß {description}")
    
    for cmd in commands:
        subprocess.run(cmd, shell=True)
    
    if not check_build():
        print(f"‚ùå –°–±–æ—Ä–∫–∞ —Å–ª–æ–º–∞–ª–∞—Å—å, –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è...")
        subprocess.run(["git", "checkout", "HEAD", "--", "modules/"])
        return False
    
    warnings = count_warnings()
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {warnings} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
    
    # –ö–æ–º–º–∏—Ç–∏–º
    subprocess.run(["git", "add", "modules/"])
    subprocess.run(["git", "commit", "-m", f"fix: {description}\\n\\nWarnings: {warnings}"])
    
    return True

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
print("üéØ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ñ–∏–∫—Å–µ—Ä —Ç–∏–ø–æ–≤")

initial = count_warnings()
print(f"üìä –ù–∞—á–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {initial}")

# –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–∑—Ü—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
samples = get_warning_samples()
print("üìã –û–±—Ä–∞–∑—Ü—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π:")
for i, sample in enumerate(samples[:3]):
    print(f"  {i+1}. {sample}")

# –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–∫–µ—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
batches = [
    {
        'commands': [
            "find modules/ -name '*.c' -exec sed -i 's/json_object_object_add(/dap_json_object_add_object(/g' {} \\;",
        ],
        'description': 'Convert json_object_object_add to dap_json_object_add_object'
    },
    {
        'commands': [
            "find modules/ -name '*.c' -exec sed -i 's/json_object \\*/dap_json_t */g' {} \\;",
        ],
        'description': 'Convert json_object* types to dap_json_t*'
    },
    {
        'commands': [
            "find modules/ -name '*.c' -exec sed -i 's/dap_json_object_add_object(\\([^,]*\\), \\([^,]*\\), json_object_new_string(\\([^)]*\\)))/dap_json_object_add_string(\\1, \\2, \\3)/g' {} \\;",
        ],
        'description': 'Fix dap_json_object_add_object with json_object_new_string'
    },
    {
        'commands': [
            "find modules/ -name '*.c' -exec sed -i 's/dap_json_object_add_object(\\([^,]*\\), \\([^,]*\\), json_object_new_int(\\([^)]*\\)))/dap_json_object_add_int(\\1, \\2, \\3)/g' {} \\;",
            "find modules/ -name '*.c' -exec sed -i 's/dap_json_object_add_object(\\([^,]*\\), \\([^,]*\\), json_object_new_uint64(\\([^)]*\\)))/dap_json_object_add_uint64(\\1, \\2, \\3)/g' {} \\;",
        ],
        'description': 'Fix dap_json_object_add_object with numeric types'
    },
    {
        'commands': [
            "find modules/ -name '*.c' -exec sed -i 's/dap_dap_json/dap_json/g' {} \\;",
            "find modules/ -name '*.c' -exec sed -i 's/dap_json_t_t/dap_json_t/g' {} \\;",
        ],
        'description': 'Clean up double replacements'
    }
]

success_count = 0
for batch in batches:
    if safe_batch_fix(batch['commands'], batch['description']):
        success_count += 1
    else:
        print(f"‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {batch['description']}")
        break

final = count_warnings()
print(f"\nüèÅ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
print(f"üìä {initial} ‚Üí {final} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤: {success_count}/{len(batches)}")
print(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {initial - final} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
