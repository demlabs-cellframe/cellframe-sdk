#!/usr/bin/env python3
"""
–ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–π —Ñ–∏–∫—Å–µ—Ä - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–±–ª–µ–º
"""
import subprocess

def count_warnings():
    subprocess.run(["make", "clean"], cwd="build")
    result = subprocess.run(["make", "-j4"], cwd="build", capture_output=True, text=True)
    return len([line for line in result.stderr.split('\n') if 'warning:' in line])

def check_build():
    result = subprocess.run(["make", "-j4"], cwd="build", capture_output=True)
    return result.returncode == 0

def apply_category_fix(commands, description):
    print(f"üéØ {description}")
    
    for cmd in commands:
        subprocess.run(cmd, shell=True)
    
    if not check_build():
        print(f"‚ùå –°–±–æ—Ä–∫–∞ —Å–ª–æ–º–∞–ª–∞—Å—å, –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è...")
        subprocess.run(["git", "checkout", "HEAD", "--", "modules/"])
        return False
    
    warnings = count_warnings()
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {warnings} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
    
    subprocess.run(["git", "add", "modules/"])
    subprocess.run(["git", "commit", "-m", f"fix: {description}\\n\\nWarnings: {warnings}"])
    return True

print("üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è JSON API")

initial = count_warnings()
print(f"üìä –ù–∞—á–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {initial}")

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
categories = [
    {
        'commands': [
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã—Ö –ø—Ä–æ–±–ª–µ–º —Å dap_json_object_add_object
            "find modules/ -name '*.c' -exec sed -i 's/dap_json_object_add_object(\\([^,]*\\), \\([^,]*\\), json_object_new_string(\\([^)]*\\)))/dap_json_object_add_string(\\1, \\2, \\3)/g' {} \\;",
        ],
        'description': 'Fix 966 dap_json_object_add_object with string issues'
    },
    {
        'commands': [
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö —Ç–∏–ø–æ–≤
            "find modules/ -name '*.c' -exec sed -i 's/dap_json_object_add_object(\\([^,]*\\), \\([^,]*\\), json_object_new_int(\\([^)]*\\)))/dap_json_object_add_int(\\1, \\2, \\3)/g' {} \\;",
            "find modules/ -name '*.c' -exec sed -i 's/dap_json_object_add_object(\\([^,]*\\), \\([^,]*\\), json_object_new_uint64(\\([^)]*\\)))/dap_json_object_add_uint64(\\1, \\2, \\3)/g' {} \\;",
        ],
        'description': 'Fix numeric type issues in dap_json_object_add_object'
    },
    {
        'commands': [
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—É–ª–µ–≤—ã—Ö —Ç–∏–ø–æ–≤
            "find modules/ -name '*.c' -exec sed -i 's/dap_json_object_add_object(\\([^,]*\\), \\([^,]*\\), json_object_new_bool(\\([^)]*\\)))/dap_json_object_add_bool(\\1, \\2, \\3)/g' {} \\;",
        ],
        'description': 'Fix boolean type issues in dap_json_object_add_object'
    }
]

success_count = 0
for category in categories:
    if apply_category_fix(category['commands'], category['description']):
        success_count += 1
    else:
        break

final = count_warnings()
print(f"\nüèÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã:")
print(f"üìä {initial} ‚Üí {final} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {success_count}/{len(categories)}")
print(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {initial - final} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")

if final < 100:
    print("üéâ –ü–æ—á—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –û—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ 100 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π!")
elif final < 500:
    print("üöÄ –û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –û—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ 500 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π!")
else:
    print("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")
