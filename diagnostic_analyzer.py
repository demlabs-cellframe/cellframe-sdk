#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
"""
import subprocess
import re
from collections import defaultdict

def get_all_warnings_detailed():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏"""
    subprocess.run(["make", "clean"], cwd="build")
    result = subprocess.run(["make", "-j4"], cwd="build", capture_output=True, text=True)
    
    warnings = []
    for line in result.stderr.split('\n'):
        if 'warning:' in line:
            warnings.append(line.strip())
    return warnings

def analyze_warning_patterns(warnings):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"""
    patterns = defaultdict(int)
    files = defaultdict(int)
    functions = defaultdict(int)
    
    for warning in warnings:
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ñ–∞–π–ª–∞–º
        file_match = re.search(r'/([^/]+\.c):', warning)
        if file_match:
            files[file_match.group(1)] += 1
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º
        func_matches = re.findall(r'(dap_json_[a-z_]+|json_object_[a-z_]+)', warning)
        for func in func_matches:
            functions[func] += 1
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–±–ª–µ–º
        if 'incompatible pointer type' in warning:
            if 'argument 1' in warning:
                patterns['argument_1_incompatible'] += 1
            elif 'argument 2' in warning:
                patterns['argument_2_incompatible'] += 1
            elif 'argument 3' in warning:
                patterns['argument_3_incompatible'] += 1
            elif 'initialization' in warning:
                patterns['initialization_incompatible'] += 1
            else:
                patterns['other_incompatible'] += 1
        elif 'implicit declaration' in warning:
            patterns['implicit_declaration'] += 1
        else:
            patterns['other_warning'] += 1
    
    return patterns, files, functions

def create_targeted_sed_scripts(patterns, functions):
    """–°–æ–∑–¥–∞—Ç—å —Ü–µ–ª–µ–≤—ã–µ sed —Å–∫—Ä–∏–ø—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
    scripts = []
    
    # –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    top_functions = sorted(functions.items(), key=lambda x: x[1], reverse=True)[:5]
    
    if any('json_object_' in func for func, count in top_functions):
        script_content = "# Targeted function replacements\n"
        for func, count in top_functions:
            if func.startswith('json_object_'):
                new_func = func.replace('json_object_', 'dap_json_')
                script_content += f"s/{func}(/{new_func}(/g\n"
        
        with open('targeted_functions.sed', 'w') as f:
            f.write(script_content)
        scripts.append('targeted_functions.sed')
    
    # –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    if patterns['argument_1_incompatible'] > 100:
        with open('fix_argument1.sed', 'w') as f:
            f.write("# Fix argument 1 type issues\n")
            f.write("s/json_object\\*/dap_json_t*/g\n")
        scripts.append('fix_argument1.sed')
    
    return scripts

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –û–°–¢–ê–õ–¨–ù–´–• –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ô")

warnings = get_all_warnings_detailed()
print(f"üìä –í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(warnings)}")

patterns, files, functions = analyze_warning_patterns(warnings)

print("\nüìã –¢–û–ü-10 –¢–ò–ü–û–í –ü–†–û–ë–õ–ï–ú:")
for pattern, count in sorted(patterns.items(), key=lambda x: x[1], reverse=True)[:10]:
    print(f"  {count:4d} - {pattern}")

print("\nüìÅ –¢–û–ü-10 –ü–†–û–ë–õ–ï–ú–ù–´–• –§–ê–ô–õ–û–í:")
for file_name, count in sorted(files.items(), key=lambda x: x[1], reverse=True)[:10]:
    print(f"  {count:4d} - {file_name}")

print("\nüîß –¢–û–ü-10 –ü–†–û–ë–õ–ï–ú–ù–´–• –§–£–ù–ö–¶–ò–ô:")
for func, count in sorted(functions.items(), key=lambda x: x[1], reverse=True)[:10]:
    print(f"  {count:4d} - {func}")

# –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
scripts = create_targeted_sed_scripts(patterns, functions)
print(f"\nüìù –°–æ–∑–¥–∞–Ω–æ {len(scripts)} —Ü–µ–ª–µ–≤—ã—Ö sed —Å–∫—Ä–∏–ø—Ç–æ–≤")

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
with open('diagnostic_report.txt', 'w') as f:
    f.write(f"–î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –û–¢–ß–ï–¢ –û–°–¢–ê–õ–¨–ù–´–• {len(warnings)} –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ô\n")
    f.write("=" * 60 + "\n\n")
    
    f.write("–¢–ò–ü–´ –ü–†–û–ë–õ–ï–ú:\n")
    for pattern, count in sorted(patterns.items(), key=lambda x: x[1], reverse=True):
        f.write(f"  {count:4d} - {pattern}\n")
    
    f.write("\n–ü–†–û–ë–õ–ï–ú–ù–´–ï –§–ê–ô–õ–´:\n")
    for file_name, count in sorted(files.items(), key=lambda x: x[1], reverse=True):
        f.write(f"  {count:4d} - {file_name}\n")
    
    f.write("\n–ü–†–û–ë–õ–ï–ú–ù–´–ï –§–£–ù–ö–¶–ò–ò:\n")
    for func, count in sorted(functions.items(), key=lambda x: x[1], reverse=True):
        f.write(f"  {count:4d} - {func}\n")

print("üìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ diagnostic_report.txt")
print("üéØ –ì–æ—Ç–æ–≤ –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–≤—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π!")
