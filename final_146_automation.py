#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –¥–ª—è 146 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
–ü—Ä–æ—Å—Ç–æ–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
"""
import subprocess
import os

def count_warnings():
    os.chdir('/home/naeper/work/python-cellframe/cellframe-sdk/build')
    subprocess.run(["make", "clean"], capture_output=True)
    result = subprocess.run(["make", "-j4"], capture_output=True, text=True)
    warnings = [line for line in result.stderr.split('\n') if 'warning:' in line]
    os.chdir('/home/naeper/work/python-cellframe/cellframe-sdk')
    return len(warnings)

def check_build():
    os.chdir('/home/naeper/work/python-cellframe/cellframe-sdk/build')
    result = subprocess.run(["make", "-j4"], capture_output=True)
    success = result.returncode == 0
    os.chdir('/home/naeper/work/python-cellframe/cellframe-sdk')
    return success

def safe_apply(command, description):
    print(f"üîß {description}")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
    result = subprocess.run(command, shell=True, capture_output=True)
    if result.returncode != 0:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–±–æ—Ä–∫—É
    if not check_build():
        print(f"‚ùå –°–±–æ—Ä–∫–∞ —Å–ª–æ–º–∞–ª–∞—Å—å, –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è...")
        subprocess.run(["git", "checkout", "HEAD", "--", "modules/"])
        return False
    
    warnings = count_warnings()
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {warnings} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
    
    # –ö–æ–º–º–∏—Ç–∏–º –µ—Å–ª–∏ –µ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ
    subprocess.run(["git", "add", "modules/"])
    subprocess.run(["git", "commit", "-m", f"fix: {description}\\n\\nWarnings: {warnings}"])
    
    return True

print("üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø –î–õ–Ø 146 –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ô")

initial = count_warnings()
print(f"üìä –ù–∞—á–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {initial}")

# –§–∏–Ω–∞–ª—å–Ω—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
final_fixes = [
    ("find modules/ -name '*.c' -exec sed -i 's/json_object_get_string(/dap_json_object_get_string(/g' {} \\;",
     "Replace json_object_get_string with dap_json_object_get_string"),
     
    ("find modules/ -name '*.c' -exec sed -i 's/json_object_is_type(/dap_json_object_is_type(/g' {} \\;", 
     "Replace json_object_is_type with dap_json_object_is_type"),
     
    ("find modules/ -name '*.c' -exec sed -i 's/json_object_array_get_idx(/dap_json_array_get_idx(/g' {} \\;",
     "Replace json_object_array_get_idx with dap_json_array_get_idx"),
     
    ("find modules/ -name '*.c' -exec sed -i 's/json_object_del(/dap_json_object_del(/g' {} \\;",
     "Replace json_object_del with dap_json_object_del"),
     
    ("find modules/ -name '*.c' -exec sed -i 's/json_object_get_int(/dap_json_object_get_int(/g' {} \\;",
     "Replace json_object_get_int with dap_json_object_get_int"),
]

success_count = 0
for command, description in final_fixes:
    if safe_apply(command, description):
        success_count += 1
    else:
        print(f"‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {description}")
        break

final = count_warnings()

print(f"\nüèÅ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê:")
print(f"üìä {initial} ‚Üí {final} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {success_count}/{len(final_fixes)}")
print(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {initial - final} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")

print(f"\nüìà –û–ë–©–ò–ô –ò–¢–û–ì –í–°–ï–ô –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò:")
print(f"üéØ –û—Ç ~1600+ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–æ {final}")
print(f"üéâ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ~{1600 - final}+ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π!")
print(f"üèÜ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {((1600 - final) / 1600) * 100:.1f}%")

if final == 0:
    print("\nüéâüéâüéâ –ú–ò–ì–†–ê–¶–ò–Ø JSON API –ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–í–ï–†–®–ï–ù–ê! üéâüéâüéâ")
    print("üèÜ –í–°–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–´ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò!")
elif final <= 10:
    print(f"\nüéâ –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò –ò–î–ï–ê–õ–¨–ù–û! –û—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ {final} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π!")
    print("üèÜ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∏–≥–ª–∞ –ø–æ—Ç—Ä—è—Å–∞—é—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!")
elif final <= 50:
    print(f"\nüöÄ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –û—Å—Ç–∞–ª–æ—Å—å {final} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π!")
    print("üéØ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–µ–≤–∑–æ—à–ª–∞ –≤—Å–µ –æ–∂–∏–¥–∞–Ω–∏—è!")
elif final <= 100:
    print(f"\nüëç –û–ß–ï–ù–¨ –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –û—Å—Ç–∞–ª–æ—Å—å {final} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π!")
    print("üìà –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø–æ–∫–∞–∑–∞–ª–∞ –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!")
else:
    print(f"\nüîÑ –û—Å—Ç–∞–ª–æ—Å—å {final} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
    print("üìä –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –¥–∞–ª–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å!")
