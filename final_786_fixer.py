#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–∫—Å–µ—Ä –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö 786 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
–ë—ã—Å—Ç—Ä—ã–µ –∏ —Ç–æ—á–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
"""
import subprocess

def count_warnings():
    subprocess.run(["make", "clean"], cwd="build")
    result = subprocess.run(["make", "-j4"], cwd="build", capture_output=True, text=True)
    return len([line for line in result.stderr.split('\n') if 'warning:' in line])

def check_build():
    result = subprocess.run(["make", "-j4"], cwd="build", capture_output=True)
    return result.returncode == 0

def quick_fix(command, description):
    print(f"‚ö° {description}")
    subprocess.run(command, shell=True)
    
    if not check_build():
        print(f"‚ùå –°–±–æ—Ä–∫–∞ —Å–ª–æ–º–∞–ª–∞—Å—å, –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è...")
        subprocess.run(["git", "checkout", "HEAD", "--", "modules/"])
        return False
    
    warnings = count_warnings()
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {warnings} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
    
    if warnings < count_warnings():  # –ï—Å–ª–∏ –µ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ
        subprocess.run(["git", "add", "modules/"])
        subprocess.run(["git", "commit", "-m", f"fix: {description}\\n\\nWarnings: {warnings}"])
    
    return True

print("‚ö° –§–ò–ù–ê–õ–¨–ù–´–ô –§–ò–ö–°–ï–† –î–õ–Ø 786 –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ô")

initial = count_warnings()
print(f"üìä –ù–∞—á–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {initial}")

# –ë—ã—Å—Ç—Ä—ã–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
quick_fixes = [
    ("find modules/ -name '*.c' -exec sed -i 's/json_object \\*/dap_json_t */g' {} \\;",
     "Replace all remaining json_object* with dap_json_t*"),
    
    ("find modules/ -name '*.c' -exec sed -i 's/dap_dap_json/dap_json/g' {} \\;",
     "Clean double dap_dap_json"),
     
    ("find modules/ -name '*.c' -exec sed -i 's/dap_json_t_t/dap_json_t/g' {} \\;",
     "Clean double dap_json_t_t"),
     
    ("find modules/ -name '*.c' -exec sed -i 's/json_object_object_add(/dap_json_object_add_object(/g' {} \\;",
     "Replace remaining json_object_object_add"),
]

success_count = 0
for command, description in quick_fixes:
    if quick_fix(command, description):
        success_count += 1
    else:
        break

final = count_warnings()
print(f"\nüèÅ –§–ò–ù–ê–õ–¨–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
print(f"üìä {initial} ‚Üí {final} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {success_count}/{len(quick_fixes)}")
print(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {initial - final} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")

if final == 0:
    print("üéâüéâüéâ –ú–ò–ì–†–ê–¶–ò–Ø JSON API –ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–í–ï–†–®–ï–ù–ê! üéâüéâüéâ")
elif final < 50:
    print("üéâ –ü–û–ß–¢–ò –ò–î–ï–ê–õ–¨–ù–û! –û—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ 50 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π!")
elif final < 200:
    print("üöÄ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –û—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ 200 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π!")
else:
    print(f"üîÑ –û—Å—Ç–∞–ª–æ—Å—å {final} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
