#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
"""
import subprocess
import re
from collections import defaultdict

def analyze_remaining_warnings():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"""
    subprocess.run(["make", "clean"], cwd="build")
    result = subprocess.run(["make", "-j4"], cwd="build", capture_output=True, text=True)
    
    warnings = []
    for line in result.stderr.split('\n'):
        if 'warning:' in line:
            warnings.append(line)
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º
    types = defaultdict(int)
    files = defaultdict(int)
    
    for warning in warnings:
        # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ñ–∞–π–ª–∞–º
        match = re.match(r'([^:]+):', warning)
        if match:
            file_path = match.group(1)
            file_name = file_path.split('/')[-1]
            files[file_name] += 1
        
        # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–±–ª–µ–º
        if 'incompatible pointer type' in warning:
            if 'dap_json_object_add_object' in warning:
                types['dap_json_object_add_object incompatible'] += 1
            elif 'dap_json_array_add' in warning:
                types['dap_json_array_add incompatible'] += 1
            elif 'initialization' in warning:
                types['initialization incompatible'] += 1
            else:
                types['other incompatible'] += 1
        elif 'implicit declaration' in warning:
            types['implicit declaration'] += 1
        else:
            types['other'] += 1
    
    return warnings, types, files

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
warnings, types, files = analyze_remaining_warnings()

print(f"üìä –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó: {len(warnings)} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
print("\nüîç –¢–û–ü-10 –¢–ò–ü–û–í –ü–†–û–ë–õ–ï–ú:")
for problem_type, count in sorted(types.items(), key=lambda x: x[1], reverse=True)[:10]:
    print(f"  {count:4d} - {problem_type}")

print("\nüìÅ –¢–û–ü-10 –§–ê–ô–õ–û–í –° –ü–†–û–ë–õ–ï–ú–ê–ú–ò:")
for file_name, count in sorted(files.items(), key=lambda x: x[1], reverse=True)[:10]:
    print(f"  {count:4d} - {file_name}")

print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
if types['dap_json_object_add_object incompatible'] > 0:
    print(f"  üéØ {types['dap_json_object_add_object incompatible']} –ø—Ä–æ–±–ª–µ–º —Å dap_json_object_add_object - –Ω—É–∂–Ω—ã —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∑–∞–º–µ–Ω—ã")
if types['dap_json_array_add incompatible'] > 0:
    print(f"  üéØ {types['dap_json_array_add incompatible']} –ø—Ä–æ–±–ª–µ–º —Å dap_json_array_add - –Ω—É–∂–Ω–∞ –∑–∞–º–µ–Ω–∞ —Ç–∏–ø–æ–≤")
if types['initialization incompatible'] > 0:
    print(f"  üéØ {types['initialization incompatible']} –ø—Ä–æ–±–ª–µ–º —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π - –Ω—É–∂–Ω–∞ –∑–∞–º–µ–Ω–∞ —Ç–∏–ø–æ–≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")

# –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω —Å–ª–µ–¥—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
with open('final_migration_plan.txt', 'w') as f:
    f.write(f"–§–ò–ù–ê–õ–¨–ù–´–ô –ü–õ–ê–ù –ú–ò–ì–†–ê–¶–ò–ò JSON API\n")
    f.write(f"================================\n\n")
    f.write(f"–í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(warnings)}\n\n")
    f.write("–¢–û–ü –ü–†–û–ë–õ–ï–ú:\n")
    for problem_type, count in sorted(types.items(), key=lambda x: x[1], reverse=True):
        f.write(f"  {count:4d} - {problem_type}\n")
    f.write("\n–ü–†–û–ë–õ–ï–ú–ù–´–ï –§–ê–ô–õ–´:\n")
    for file_name, count in sorted(files.items(), key=lambda x: x[1], reverse=True):
        f.write(f"  {count:4d} - {file_name}\n")

print("\nüìù –ü–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ final_migration_plan.txt")
print("üéØ –ì–æ—Ç–æ–≤ –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π!")
