#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∏–≥—Ä–∞—Ç–æ—Ä JSON API
–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —Ç–æ—á–µ—á–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–µ–∑ –∫–∞—Å–∫–∞–¥–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
"""
import os
import re
import subprocess
import json

def get_warning_details():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è—Ö"""
    subprocess.run(["make", "clean"], cwd="build")
    result = subprocess.run(["make", "-j4"], cwd="build", capture_output=True, text=True)
    
    warnings = []
    for line in result.stderr.split('\n'):
        if 'warning:' in line and ('incompatible pointer type' in line or 'implicit declaration' in line):
            match = re.match(r'([^:]+):(\d+):\d+: warning: (.+)', line)
            if match:
                file_path, line_num, message = match.groups()
                warnings.append({
                    'file': file_path.replace('/home/naeper/work/python-cellframe/cellframe-sdk/', ''),
                    'line': int(line_num),
                    'message': message
                })
    return warnings

def categorize_warnings(warnings):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–ª—è —Ç–æ—á–µ—á–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    categories = {
        'json_object_object_add_wrong': [],
        'json_object_array_add_wrong': [],
        'json_object_type_mismatch': [],
        'implicit_declarations': [],
        'initialization_mismatch': [],
        'other': []
    }
    
    for w in warnings:
        msg = w['message']
        if 'json_object_object_add' in msg and 'incompatible' in msg:
            categories['json_object_object_add_wrong'].append(w)
        elif 'json_object_array_add' in msg and 'incompatible' in msg:
            categories['json_object_array_add_wrong'].append(w)
        elif 'json_object' in msg and 'dap_json_t' in msg and 'incompatible' in msg:
            categories['json_object_type_mismatch'].append(w)
        elif 'implicit declaration' in msg:
            categories['implicit_declarations'].append(w)
        elif 'initialization' in msg and 'incompatible' in msg:
            categories['initialization_mismatch'].append(w)
        else:
            categories['other'].append(w)
    
    return categories

def create_targeted_fixes(categories):
    """–°–æ–∑–¥–∞—Ç—å —Ü–µ–ª–µ–≤—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    fixes = []
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ json_object_object_add –ø—Ä–æ–±–ª–µ–º
    if categories['json_object_object_add_wrong']:
        fixes.extend([
            "# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ json_object_object_add –ø—Ä–æ–±–ª–µ–º",
            "find modules/ -name '*.c' -exec sed -i 's/json_object_object_add(/dap_json_object_add_object(/g' {} \\;",
        ])
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if categories['json_object_type_mismatch']:
        fixes.extend([
            "# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö", 
            "find modules/ -name '*.c' -exec sed -i 's/json_object \\*/dap_json_t */g' {} \\;",
        ])
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if categories['initialization_mismatch']:
        fixes.extend([
            "# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏",
            "find modules/ -name '*.c' -exec sed -i 's/json_object \\*\\([a-z_][a-zA-Z0-9_]*\\) = dap_json_/dap_json_t *\\1 = dap_json_/g' {} \\;",
        ])
    
    return fixes

def apply_fixes_safely(fixes):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
    for i, fix in enumerate(fixes):
        if fix.startswith('#'):
            print(f"\n{fix}")
            continue
            
        print(f"–ü—Ä–∏–º–µ–Ω—è—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {i+1}...")
        result = subprocess.run(fix, shell=True, cwd="/home/naeper/work/python-cellframe/cellframe-sdk")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–±–æ—Ä–∫—É –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if not check_build():
            print(f"‚ùå –°–±–æ—Ä–∫–∞ —Å–ª–æ–º–∞–ª–∞—Å—å –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ {i+1}, –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è...")
            subprocess.run(["git", "checkout", "HEAD", "--", "modules/"], 
                          cwd="/home/naeper/work/python-cellframe/cellframe-sdk")
            return False
        
        warnings = count_warnings()
        print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {i+1} —É—Å–ø–µ—à–Ω–æ: {warnings} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
    
    return True

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
print("üéØ –§–∏–Ω–∞–ª—å–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è JSON API")

warnings = get_warning_details()
print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(warnings)} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")

categories = categorize_warnings(warnings)
print("\nüìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–±–ª–µ–º:")
for cat, items in categories.items():
    if items:
        print(f"  {cat}: {len(items)}")

fixes = create_targeted_fixes(categories)
print(f"\nüîß –°–æ–∑–¥–∞–Ω–æ {len([f for f in fixes if not f.startswith('#')])} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
with open('migration_plan.txt', 'w') as f:
    f.write("–ü–ª–∞–Ω —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ JSON API:\n\n")
    for cat, items in categories.items():
        if items:
            f.write(f"{cat}: {len(items)} –ø—Ä–æ–±–ª–µ–º\n")
    f.write(f"\n–í—Å–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {len(fixes)}\n")

if apply_fixes_safely(fixes):
    final_warnings = count_warnings()
    print(f"\nüéâ –§–∏–Ω–∞–ª—å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {final_warnings} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–º–∏—Ç
    subprocess.run(["git", "add", "modules/"], cwd="/home/naeper/work/python-cellframe/cellframe-sdk")
    subprocess.run([
        "git", "commit", "-m", f"feat: complete final JSON API migration\n\nFinal warnings count: {final_warnings}\nProject builds successfully"
    ], cwd="/home/naeper/work/python-cellframe/cellframe-sdk")
else:
    print("‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –Ω—É–∂–µ–Ω —Ä—É—á–Ω–æ–π –ø–æ–¥—Ö–æ–¥")
