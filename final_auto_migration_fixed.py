#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∏–≥—Ä–∞—Ç–æ—Ä JSON API
"""
import os
import re
import subprocess

def check_build():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–±–æ—Ä–∫—É –ø—Ä–æ–µ–∫—Ç–∞"""
    result = subprocess.run(
        ["make", "-j4"], 
        cwd="build",
        capture_output=True
    )
    return result.returncode == 0

def count_warnings():
    """–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
    subprocess.run(["make", "clean"], cwd="build")
    result = subprocess.run(
        ["make", "-j4"], 
        cwd="build",
        capture_output=True, text=True
    )
    return len([line for line in result.stderr.split('\n') if 'warning:' in line])

def apply_single_fix(command, description):
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –æ–¥–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
    print(f"üîß {description}")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    result = subprocess.run(command, shell=True)
    if result.returncode != 0:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–±–æ—Ä–∫—É
    if not check_build():
        print(f"‚ùå –°–±–æ—Ä–∫–∞ —Å–ª–æ–º–∞–ª–∞—Å—å, –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è...")
        subprocess.run(["git", "checkout", "HEAD", "--", "modules/"])
        return False
    
    warnings = count_warnings()
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {warnings} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
    
    # –ö–æ–º–º–∏—Ç–∏–º —É—Å–ø–µ—à–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    subprocess.run(["git", "add", "modules/"])
    subprocess.run(["git", "commit", "-m", f"fix: {description}\n\nWarnings: {warnings}"])
    
    return True

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
print("üéØ –§–∏–Ω–∞–ª—å–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è JSON API")

initial_warnings = count_warnings()
print(f"üìä –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {initial_warnings} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")

# –°–ø–∏—Å–æ–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–æ –æ–¥–Ω–æ–º—É
fixes = [
    ("find modules/ -name '*.c' -exec sed -i 's/json_object \\*/dap_json_t */g' {} \\;", 
     "–ó–∞–º–µ–Ω–∞ –≤—Å–µ—Ö json_object* –Ω–∞ dap_json_t*"),
    
    ("find modules/ -name '*.c' -exec sed -i 's/json_object_object_add(/dap_json_object_add_object(/g' {} \\;",
     "–ó–∞–º–µ–Ω–∞ json_object_object_add –Ω–∞ dap_json_object_add_object"),
    
    ("find modules/ -name '*.c' -exec sed -i 's/dap_json_object_add_object(\\([^,]*\\), \\([^,]*\\), json_object_new_string(\\([^)]*\\)))/dap_json_object_add_string(\\1, \\2, \\3)/g' {} \\;",
     "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ dap_json_object_add_object —Å json_object_new_string"),
    
    ("find modules/ -name '*.c' -exec sed -i 's/dap_json_object_add_object(\\([^,]*\\), \\([^,]*\\), json_object_new_int(\\([^)]*\\)))/dap_json_object_add_int(\\1, \\2, \\3)/g' {} \\;",
     "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ dap_json_object_add_object —Å json_object_new_int"),
    
    ("find modules/ -name '*.c' -exec sed -i 's/dap_json_object_add_object(\\([^,]*\\), \\([^,]*\\), json_object_new_uint64(\\([^)]*\\)))/dap_json_object_add_uint64(\\1, \\2, \\3)/g' {} \\;",
     "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ dap_json_object_add_object —Å json_object_new_uint64"),
    
    ("find modules/ -name '*.c' -exec sed -i 's/dap_json_object_add_object(\\([^,]*\\), \\([^,]*\\), json_object_new_bool(\\([^)]*\\)))/dap_json_object_add_bool(\\1, \\2, \\3)/g' {} \\;",
     "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ dap_json_object_add_object —Å json_object_new_bool"),
    
    ("find modules/ -name '*.c' -exec sed -i 's/dap_dap_json/dap_json/g' {} \\;",
     "–û—á–∏—Å—Ç–∫–∞ –¥–≤–æ–π–Ω—ã—Ö –∑–∞–º–µ–Ω dap_dap_json"),
    
    ("find modules/ -name '*.c' -exec sed -i 's/dap_json_t_t/dap_json_t/g' {} \\;",
     "–û—á–∏—Å—Ç–∫–∞ –¥–≤–æ–π–Ω—ã—Ö –∑–∞–º–µ–Ω dap_json_t_t"),
]

# –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ –æ–¥–Ω–æ–º—É
success_count = 0
for command, description in fixes:
    if apply_single_fix(command, description):
        success_count += 1
    else:
        print(f"‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏: {description}")
        break

final_warnings = count_warnings()
print(f"\nüèÅ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏:")
print(f"üìä –ù–∞—á–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {initial_warnings}")
print(f"üìä –§–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {final_warnings}")
print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {success_count}/{len(fixes)}")
print(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {initial_warnings - final_warnings} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")

if final_warnings == 0:
    print("üéâ –ú–ò–ì–†–ê–¶–ò–Ø –ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–í–ï–†–®–ï–ù–ê!")
else:
    print(f"üîÑ –û—Å—Ç–∞–ª–æ—Å—å {final_warnings} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–ª—è —Ä—É—á–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
