#!/usr/bin/env python3
"""
–ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ñ–∏–∫—Å–µ—Ä - –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ü–∏—è–º–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–±–æ—Ä–∫–∏
"""
import subprocess
import time

def check_build():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–±–æ—Ä–∫—É –ø—Ä–æ–µ–∫—Ç–∞"""
    result = subprocess.run(
        ["make", "-j4"], 
        cwd="/home/naeper/work/python-cellframe/cellframe-sdk/build",
        capture_output=True
    )
    return result.returncode == 0

def count_warnings():
    """–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
    subprocess.run(["make", "clean"], cwd="/home/naeper/work/python-cellframe/cellframe-sdk/build")
    result = subprocess.run(
        ["make", "-j4"], 
        cwd="/home/naeper/work/python-cellframe/cellframe-sdk/build",
        capture_output=True, text=True
    )
    return len([line for line in result.stderr.split('\n') if 'warning:' in line])

def apply_fix_batch(batch_num):
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø–æ—Ä—Ü–∏—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    fixes = [
        # Batch 1: –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–º–µ–Ω—ã —Ç–∏–ø–æ–≤
        [
            "find modules/ -name '*.c' -exec sed -i 's/json_object \\*\\([a-z_][a-zA-Z0-9_]*\\);/dap_json_t *\\1;/g' {} \\;",
        ],
        # Batch 2: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ json_object_object_add
        [
            "find modules/ -name '*.c' -exec sed -i 's/json_object_object_add(/dap_json_object_add_object(/g' {} \\;",
        ],
        # Batch 3: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –≤ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è—Ö
        [
            "find modules/ -name '*.c' -exec sed -i 's/json_object \\*\\([a-z_][a-zA-Z0-9_]*\\) =/dap_json_t *\\1 =/g' {} \\;",
        ],
        # Batch 4: –û—á–∏—Å—Ç–∫–∞ –¥–≤–æ–π–Ω—ã—Ö –∑–∞–º–µ–Ω
        [
            "find modules/ -name '*.c' -exec sed -i 's/dap_dap_json/dap_json/g' {} \\;",
            "find modules/ -name '*.c' -exec sed -i 's/dap_json_t_t/dap_json_t/g' {} \\;",
        ]
    ]
    
    if batch_num < len(fixes):
        for cmd in fixes[batch_num]:
            subprocess.run(cmd, shell=True, cwd="/home/naeper/work/python-cellframe/cellframe-sdk")
        return True
    return False

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
print("üöÄ –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–±–æ—Ä–∫–∏...")

initial_warnings = count_warnings()
print(f"–ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {initial_warnings}")

batch = 0
while batch < 4:
    print(f"\nüì¶ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ batch {batch + 1}...")
    
    if not apply_fix_batch(batch):
        break
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–±–æ—Ä–∫—É
    if not check_build():
        print(f"‚ùå –°–±–æ—Ä–∫–∞ —Å–ª–æ–º–∞–ª–∞—Å—å –Ω–∞ batch {batch + 1}, –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è...")
        subprocess.run(["git", "checkout", "HEAD", "--", "modules/"], 
                      cwd="/home/naeper/work/python-cellframe/cellframe-sdk")
        break
    
    # –°—á–∏—Ç–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    warnings = count_warnings()
    print(f"‚úÖ Batch {batch + 1} —É—Å–ø–µ—à–µ–Ω: {warnings} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
    
    # –ö–æ–º–º–∏—Ç–∏–º —É—Å–ø–µ—à–Ω—ã–π batch
    subprocess.run(["git", "add", "modules/"], cwd="/home/naeper/work/python-cellframe/cellframe-sdk")
    subprocess.run([
        "git", "commit", "-m", f"fix: apply JSON migration batch {batch + 1}\n\nWarnings: {initial_warnings} ‚Üí {warnings}"
    ], cwd="/home/naeper/work/python-cellframe/cellframe-sdk")
    
    initial_warnings = warnings
    batch += 1

print(f"\nüèÅ –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –§–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {count_warnings()}")
