#!/bin/bash -e
. /usr/share/debconf/confmodule

DAP_CHAINS_NAME="cellframe"
DAP_APP_NAME="${DAP_CHAINS_NAME}-node"
DAP_PREFIX="/opt/${DAP_APP_NAME}"

DAP_CFG_TPL="${DAP_PREFIX}/share/configs/${DAP_APP_NAME}.cfg.tpl"

# Store write config to new if present smth
DAP_CFG="${DAP_PREFIX}/etc/${DAP_APP_NAME}.cfg"

[ -e "/etc/profile.d/${DAP_APP_NAME}.sh" ] || ln -sf ${DAP_PREFIX}/share/profile.d/${DAP_APP_NAME}.sh /etc/profile.d/${DAP_APP_NAME}.sh

# Init node config
if [ -e "${DAP_CFG}" ]; then
    DAP_CFG="${DAP_PREFIX}/etc/${DAP_APP_NAME}.cfg.dpkg-new"
else
    DAP_CFG="${DAP_PREFIX}/etc/${DAP_APP_NAME}.cfg"
fi

cat ${DAP_CFG_TPL} > ${DAP_CFG} || true

sed -i "s/{PREFIX}/\/opt\/${DAP_APP_NAME}/g" ${DAP_CFG}  || true

db_get cellframe-node/debug_mode || true
sed -i "s/{DEBUG_MODE}/${RET}/g" ${DAP_CFG}  || true

db_get cellframe-node/auto_online || true
sed -i "s/{AUTO_ONLINE}/${RET}/g" ${DAP_CFG}  || true

db_get cellframe-node/server_enabled || true
sed -i "s/{SERVER_ENABLED}/${RET}/g" ${DAP_CFG}  || true

db_get cellframe-node/server_port || true
sed -i "s/{SERVER_PORT}/${RET}/g" ${DAP_CFG}  || true

db_get cellframe-node/server_addr || true
sed -i "s/{SERVER_ADDR}/${RET}/g" ${DAP_CFG}  || true

db_get cellframe-node/notify_srv_addr || true
sed -i "s/{NOTIFY_SRV_ADDR}/${RET}/g" ${DAP_CFG}  || true

db_get cellframe-node/notify_srv_port || true
sed -i "s/{NOTIFY_SRV_PORT}/${RET}/g" ${DAP_CFG}  || true

# Init subzero
NET_NAME="subzero"

db_get cellframe-node/subzero_enabled || true
if [ "${RET}" = "true" ]; then
    DAP_CFG_NET="${DAP_PREFIX}/etc/network/${NET_NAME}.cfg"
    DAP_CFG_NET_TPL="${DAP_PREFIX}/share/configs/network/${NET_NAME}.cfg.tpl"
    DAP_NET_CFG=""
    
    if [ -e "$DAP_CFG_NET" ]; then
	DAP_NET_CFG="${DAP_PREFIX}/etc/network/${NET_NAME}.cfg.dpkg-new"
    else
	DAP_NET_CFG="${DAP_PREFIX}/etc/network/${NET_NAME}.cfg"
    fi

    cat ${DAP_CFG_NET_TPL} > ${DAP_NET_CFG} || true
    db_get cellframe-node/subzero_node_type || true
    NODE_TYPE=${RET}
    sed -i "s/{NODE_TYPE}/${NODE_TYPE}/g" ${DAP_NET_CFG}  || true
    echo "[*] Enabled subzero"
fi

# Init mileena
NET_NAME="mileena"

db_get cellframe-node/mileena_enabled || true
if [ "$RET" = "true" ]; then
    DAP_CFG_NET="${DAP_PREFIX}/etc/network/${NET_NAME}.cfg"
    DAP_CFG_NET_TPL="${DAP_PREFIX}/share/configs/network/${NET_NAME}.cfg.tpl"
    DAP_NET_CFG=""
    
    if [ -e "${DAP_CFG_NET}" ]; then
	DAP_NET_CFG="${DAP_PREFIX}/etc/network/${NET_NAME}.cfg.dpkg-new"
    else
	DAP_NET_CFG="${DAP_PREFIX}/etc/network/${NET_NAME}.cfg"
    fi

    cat ${DAP_CFG_NET_TPL} > ${DAP_NET_CFG} || true
    db_get cellframe-node/mileena_node_type || true
    NODE_TYPE=${RET}
    sed -i "s/{NODE_TYPE}/${NODE_TYPE}/g" ${DAP_NET_CFG}  || true
    echo "[*] Enabled mileena"
fi

# Init Minkowski
NET_NAME="kelvpn-minkowski"

db_get cellframe-node/kelvpn_minkowski_enabled || true
if [ "${RET}" = "true" ]; then
    DAP_CFG_NET="${DAP_PREFIX}/etc/network/${NET_NAME}.cfg"
    DAP_CFG_NET_TPL="${DAP_PREFIX}/share/configs/network/${NET_NAME}.cfg.tpl"
    DAP_NET_CFG=""
    
    if [ -e "$DAP_CFG_NET" ]; then
	DAP_NET_CFG="${DAP_PREFIX}/etc/network/${NET_NAME}.cfg.dpkg-new"
    else
	DAP_NET_CFG="${DAP_PREFIX}/etc/network/${NET_NAME}.cfg"
    fi

    cat ${DAP_CFG_NET_TPL} > ${DAP_NET_CFG} || true
    db_get cellframe-node/kelvpn_minkowski_node_type || true
    NODE_TYPE=${RET}
    sed -i "s/{NODE_TYPE}/${NODE_TYPE}/g" ${DAP_NET_CFG}  || true
    echo "[*] Enabled kelvpn-minkowski"
fi

# Init Backbone
NET_NAME="Backbone"

db_get cellframe-node/backbone_enabled || true
if [ "${RET}" = "true" ]; then
    DAP_CFG_NET="${DAP_PREFIX}/etc/network/${NET_NAME}.cfg"
    DAP_CFG_NET_TPL="${DAP_PREFIX}/share/configs/network/${NET_NAME}.cfg.tpl"
    DAP_NET_CFG=""
    
    if [ -e "${DAP_CFG_NET}" ]; then
	DAP_NET_CFG="${DAP_PREFIX}/etc/network/${NET_NAME}.cfg.dpkg-new"
    else
	DAP_NET_CFG="${DAP_PREFIX}/etc/network/${NET_NAME}.cfg"
    fi

    cat ${DAP_CFG_NET_TPL} > ${DAP_NET_CFG} || true
    db_get cellframe-node/backbone_node_type || true
    NODE_TYPE=$RET
    sed -i "s/{NODE_TYPE}/${NODE_TYPE}/g" ${DAP_NET_CFG}  || true
    echo "[*] Enabled Backbone"
fi

#Set up Python plugins
db_get cellframe-node/enable_python_plugins || true
if [ "${RET}" = "true" ]; then
    sed -i 's/#\[plugins\]/\[plugins\]/g' ${DAP_CFG} || true
    sed -i 's/#py_load=.*/py_load=true/g' ${DAP_CFG} || true
    db_get cellframe-node/python_plugins_path || true
    sed -i "s|#py_path=.*|py_path=${RET}|g" ${DAP_CFG} || true
    echo "[*] Enabled Python plugins"
fi

if [ $(cat /etc/passwd | grep ${DAP_APP_NAME}) ] ; then
    usermod ${DAP_APP_NAME} -s /bin/false > /dev/null || true # Let's change the default shell just in case
else
    echo "[*] Add user ${DAP_APP_NAME}"
    adduser --system --no-create-home --group --home /opt/${DAP_APP_NAME} ${DAP_APP_NAME} --shell /bin/false > /dev/null || true
fi

echo "[*] Check if /etc/systemd/system/${DAP_APP_NAME}.service file is available..."
if [ -e /etc/systemd/system/${DAP_APP_NAME}.service ]; then
    echo "[*] File found, restarting ${DAP_APP_NAME} to implement changes"
    systemctl daemon-reload || true
    systemctl start ${DAP_APP_NAME} || true
    echo "[!] Done"
else
    echo "[!] Installing ${DAP_APP_NAME} as systemd service"
    ln -sf $DAP_PREFIX/share/${DAP_APP_NAME}.service /etc/systemd/system/${DAP_APP_NAME}.service || true
    systemctl enable ${DAP_PREFIX}/share/${DAP_APP_NAME}.service || true
    echo "[*] Enabling logrotate"
    ln -sf ${DAP_PREFIX}/share/logrotate/${DAP_APP_NAME} /etc/logrotate.d/${DAP_APP_NAME} || true

    mkdir -p ${DAP_PREFIX}/var/{run,lib/wallet,lib/global_db,lib/plugins,log} || true
    
    touch ${DAP_PREFIX}/var/run/${DAP_APP_NAME}.pid || true
    
    for filename in $(find ${DAP_PREFIX} | grep -v bugreport); do
        if [ -d ${filename} ]; then
            chmod 0775 ${filename} 2>/dev/null || true
        else
            chmod 0664 ${filename} 2>/dev/null || true
        fi
    done

    chmod 0666 ${DAP_CFG}
    chmod 0666 ${DAP_CFG_TPL}
    chmod 0775 ${DAP_PREFIX}/bin/* || true

    #set python permissions    
    find ${DAP_PREFIX}/bin/python -type d -exec chmod 755 {} +
    chmod 774 ${DAP_PREFIX}/bin/python/bin/* || true
    chown -R ${DAP_APP_NAME}: ${DAP_PREFIX}
    echo "[*] Starting ${DAP_APP_NAME} service"
    systemctl start ${DAP_APP_NAME} || true
    echo "[!] Done"
fi

exit 0