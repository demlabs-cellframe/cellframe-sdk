#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–∫—Å–µ—Ä –±–µ–∑ –∑–∞–≤–∏—Å–∞–Ω–∏–π
"""
import subprocess

def quick_count():
    result = subprocess.run(["make", "-j4"], cwd="build", capture_output=True, text=True)
    return len([line for line in result.stderr.split('\n') if 'warning:' in line])

def quick_build_check():
    result = subprocess.run(["make", "-j4"], cwd="build", capture_output=True, timeout=60)
    return result.returncode == 0

def quick_fix(command, description):
    print(f"‚ö° {description}")
    subprocess.run(command, shell=True, timeout=30)
    
    if not quick_build_check():
        print(f"‚ùå –°–±–æ—Ä–∫–∞ —Å–ª–æ–º–∞–ª–∞—Å—å, –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è...")
        subprocess.run(["git", "checkout", "HEAD", "--", "modules/"])
        return False
    
    warnings = quick_count()
    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {warnings} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
    
    subprocess.run(["git", "add", "modules/"])
    subprocess.run(["git", "commit", "-m", f"fix: {description}\\n\\nWarnings: {warnings}"])
    return True

print("‚ö° –ë–´–°–¢–†–´–ô –§–ò–ù–ê–õ–¨–ù–´–ô –§–ò–ö–°–ï–†")

initial = quick_count()
print(f"üìä –ù–∞—á–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {initial}")

# –ë—ã—Å—Ç—Ä—ã–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
quick_fixes = [
    ("find modules/ -name '*.c' -exec sed -i 's/json_object_get_string(/dap_json_object_get_string(/g' {} \\;",
     "Replace json_object_get_string"),
     
    ("find modules/ -name '*.c' -exec sed -i 's/json_object_is_type(/dap_json_object_is_type(/g' {} \\;",
     "Replace json_object_is_type"),
     
    ("find modules/ -name '*.c' -exec sed -i 's/json_object_object_get(/dap_json_object_get(/g' {} \\;",
     "Replace json_object_object_get"),
     
    ("find modules/ -name '*.c' -exec sed -i 's/json_object_to_json_string(/dap_json_to_string(/g' {} \\;",
     "Replace json_object_to_json_string"),
]

success_count = 0
for command, description in quick_fixes:
    try:
        if quick_fix(command, description):
            success_count += 1
        else:
            break
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        break

final = quick_count()
print(f"\nüèÅ –ë–´–°–¢–†–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
print(f"üìä {initial} ‚Üí {final} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {success_count}/{len(quick_fixes)}")
print(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {initial - final} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")

print(f"\nüìà –û–ë–©–ò–ô –ò–¢–û–ì –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò:")
print(f"üéØ –û—Ç ~1600+ –¥–æ {final} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
print(f"üéâ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ~{1600 - final}+ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π!")
print(f"üèÜ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {((1600 - final) / 1600) * 100:.1f}%")
