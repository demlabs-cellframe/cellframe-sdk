#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–∫—Å–µ—Ä –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö 826 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
–¢–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–∞–º–µ–Ω—ã
"""
import subprocess

def count_warnings():
    subprocess.run(["make", "clean"], cwd="build")
    result = subprocess.run(["make", "-j4"], cwd="build", capture_output=True, text=True)
    return len([line for line in result.stderr.split('\n') if 'warning:' in line])

def check_build():
    result = subprocess.run(["make", "-j4"], cwd="build", capture_output=True)
    return result.returncode == 0

def simple_fix(command, description):
    print(f"üîß {description}")
    subprocess.run(command, shell=True)
    
    if not check_build():
        print(f"‚ùå –°–±–æ—Ä–∫–∞ —Å–ª–æ–º–∞–ª–∞—Å—å, –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è...")
        subprocess.run(["git", "checkout", "HEAD", "--", "modules/"])
        return False
    
    warnings = count_warnings()
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {warnings} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
    
    subprocess.run(["git", "add", "modules/"])
    subprocess.run(["git", "commit", "-m", f"fix: {description}\\n\\nWarnings: {warnings}"])
    return True

print("üîß –ü–†–û–°–¢–û–ô –§–ò–ù–ê–õ–¨–ù–´–ô –§–ò–ö–°–ï–†")

initial = count_warnings()
print(f"üìä –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {initial}")

# –¢–æ–ª—å–∫–æ —Å–∞–º—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
safe_fixes = [
    ("find modules/ -name '*.c' -exec sed -i 's/dap_dap_json/dap_json/g' {} \\;",
     "Clean any remaining double replacements"),
     
    ("find modules/ -name '*.c' -exec sed -i 's/json_object_object_add(/dap_json_object_add_object(/g' {} \\;",
     "Replace remaining json_object_object_add calls"),
     
    ("find modules/ -name '*.c' -exec sed -i 's/json_object_array_length(/dap_json_array_length(/g' {} \\;",
     "Replace json_object_array_length calls"),
     
    ("find modules/ -name '*.c' -exec sed -i 's/json_object_object_get(/dap_json_object_get(/g' {} \\;",
     "Replace json_object_object_get calls"),
]

success_count = 0
for command, description in safe_fixes:
    if simple_fix(command, description):
        success_count += 1
    else:
        break

final = count_warnings()
print(f"\nüèÅ –ü–†–û–°–¢–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù–´:")
print(f"üìä {initial} ‚Üí {final} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {success_count}/{len(safe_fixes)}")
print(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {initial - final} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")

if final == 0:
    print("üéâüéâüéâ –ú–ò–ì–†–ê–¶–ò–Ø JSON API –ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–í–ï–†–®–ï–ù–ê! üéâüéâüéâ")
elif final < 100:
    print("üéâ –ü–û–ß–¢–ò –ò–î–ï–ê–õ–¨–ù–û! –û—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ 100 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π!")
elif final < 300:
    print("üöÄ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –û—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ 300 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π!")
else:
    print(f"üîÑ –û—Å—Ç–∞–ª–æ—Å—å {final} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
