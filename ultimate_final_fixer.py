#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π –º–æ—â–Ω—ã–π —Ñ–∏–∫—Å–µ—Ä –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö 786 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π, –Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥
"""
import subprocess
import re

def count_warnings():
    subprocess.run(["make", "clean"], cwd="build")
    result = subprocess.run(["make", "-j4"], cwd="build", capture_output=True, text=True)
    return len([line for line in result.stderr.split('\n') if 'warning:' in line])

def check_build():
    result = subprocess.run(["make", "-j4"], cwd="build", capture_output=True)
    return result.returncode == 0

def get_warning_samples():
    subprocess.run(["make", "clean"], cwd="build")
    result = subprocess.run(["make", "-j4"], cwd="build", capture_output=True, text=True)
    return [line for line in result.stderr.split('\n') if 'warning:' in line][:5]

def mega_fix(commands, description):
    print(f"üöÄ {description}")
    
    for i, cmd in enumerate(commands):
        print(f"   üìã –ö–æ–º–∞–Ω–¥–∞ {i+1}/{len(commands)}: {cmd[:60]}...")
        subprocess.run(cmd, shell=True)
    
    if not check_build():
        print(f"‚ùå –°–±–æ—Ä–∫–∞ —Å–ª–æ–º–∞–ª–∞—Å—å, –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è...")
        subprocess.run(["git", "checkout", "HEAD", "--", "modules/"])
        return False
    
    warnings = count_warnings()
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {warnings} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
    
    subprocess.run(["git", "add", "modules/"])
    subprocess.run(["git", "commit", "-m", f"fix: {description}\\n\\nWarnings: {warnings}"])
    return True

print("üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –ú–û–©–ù–´–ô –§–ò–ö–°–ï–† JSON API")

initial = count_warnings()
print(f"üìä –ù–∞—á–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {initial}")

# –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–∑—Ü—ã –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
samples = get_warning_samples()
print("üîç –û–±—Ä–∞–∑—Ü—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π:")
for i, sample in enumerate(samples):
    print(f"  {i+1}. {sample}")

# –ú–µ–≥–∞-–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
mega_fixes = [
    {
        'commands': [
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è json_object* —Ç–∏–ø–æ–≤ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            "find modules/ -name '*.c' -exec sed -i 's/^\\([ ]*\\)json_object \\*\\([a-z_][a-zA-Z0-9_]*\\)\\(.*\\)$/\\1dap_json_t *\\2\\3/g' {} \\;",
            "find modules/ -name '*.c' -exec sed -i 's/^\\([ ]*\\)json_object\\* \\([a-z_][a-zA-Z0-9_]*\\)\\(.*\\)$/\\1dap_json_t* \\2\\3/g' {} \\;",
            "find modules/ -name '*.c' -exec sed -i 's/^\\([ ]*\\)json_object\\*\\([a-z_][a-zA-Z0-9_]*\\)\\(.*\\)$/\\1dap_json_t*\\2\\3/g' {} \\;",
        ],
        'description': 'Mega fix: Replace all json_object* variable declarations'
    },
    {
        'commands': [
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è json_object —Ñ—É–Ω–∫—Ü–∏–π
            "find modules/ -name '*.c' -exec sed -i 's/json_object_object_add(/dap_json_object_add_object(/g' {} \\;",
            "find modules/ -name '*.c' -exec sed -i 's/json_object_array_get_idx(/dap_json_array_get_idx(/g' {} \\;",
            "find modules/ -name '*.c' -exec sed -i 's/json_object_get_string(/dap_json_object_get_string(/g' {} \\;",
            "find modules/ -name '*.c' -exec sed -i 's/json_object_get_int(/dap_json_object_get_int(/g' {} \\;",
        ],
        'description': 'Mega fix: Replace all remaining json_object functions'
    },
    {
        'commands': [
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
            "find modules/ -name '*.c' -exec sed -i 's/dap_dap_json/dap_json/g' {} \\;",
            "find modules/ -name '*.c' -exec sed -i 's/dap_json_t_t/dap_json_t/g' {} \\;",
            "find modules/ -name '*.c' -exec sed -i 's/dap_json_object_new_string_string/dap_json_object_new_string/g' {} \\;",
            "find modules/ -name '*.c' -exec sed -i 's/dap_json_object_add_object_object/dap_json_object_add_object/g' {} \\;",
        ],
        'description': 'Mega cleanup: Remove all double replacements and artifacts'
    }
]

success_count = 0
for fix in mega_fixes:
    if mega_fix(fix['commands'], fix['description']):
        success_count += 1
    else:
        print(f"‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {fix['description']}")
        break

final = count_warnings()
print(f"\nüèÅ –§–ò–ù–ê–õ–¨–ù–´–ï –ú–ï–ì–ê-–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
print(f"üìä –ü–†–û–ì–†–ï–°–°: {initial} ‚Üí {final} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
print(f"‚úÖ –£–°–ü–ï–®–ù–´–• –ú–ï–ì–ê-–§–ò–ö–°–û–í: {success_count}/{len(mega_fixes)}")
print(f"üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: {initial - final} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")

if final == 0:
    print("üéâüéâüéâ –ú–ò–ì–†–ê–¶–ò–Ø JSON API –ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–í–ï–†–®–ï–ù–ê! üéâüéâüéâ")
    print("üèÜ –í–°–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–´ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò!")
elif final < 50:
    print("üéâ –ü–û–ß–¢–ò –ò–î–ï–ê–õ–¨–ù–û! –û—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ 50 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π!")
elif final < 200:
    print("üöÄ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –û—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ 200 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π!")
elif final < 400:
    print("üëç –•–û–†–û–®–ò–ô –ü–†–û–ì–†–ï–°–°! –û—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ 400 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π!")
else:
    print(f"üîÑ –û—Å—Ç–∞–ª–æ—Å—å {final} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã")

print(f"\nüìà –û–ë–©–ò–ô –ü–†–û–ì–†–ï–°–° –°–ï–°–°–ò–ò: ~1600+ ‚Üí {final} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
print("üéØ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø–æ–∫–∞–∑–∞–ª–∞ –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!")
