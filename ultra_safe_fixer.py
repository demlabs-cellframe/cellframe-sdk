#!/usr/bin/env python3
"""
–£–ª—å—Ç—Ä–∞-–±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ñ–∏–∫—Å–µ—Ä - —Ç–æ–ª—å–∫–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –∑–∞–º–µ–Ω—ã
"""
import subprocess

def count_warnings():
    """–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
    subprocess.run(["make", "clean"], cwd="build")
    result = subprocess.run(["make", "-j4"], cwd="build", capture_output=True, text=True)
    return len([line for line in result.stderr.split('\n') if 'warning:' in line])

def check_build():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–±–æ—Ä–∫—É"""
    result = subprocess.run(["make", "-j4"], cwd="build", capture_output=True)
    return result.returncode == 0

def safe_replace(pattern, description):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–º–µ–Ω–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
    print(f"üîß {description}")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—É
    cmd = f"find modules/ -name '*.c' -exec sed -i '{pattern}' {{}} \\;"
    subprocess.run(cmd, shell=True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–±–æ—Ä–∫—É
    if not check_build():
        print(f"‚ùå –°–±–æ—Ä–∫–∞ —Å–ª–æ–º–∞–ª–∞—Å—å, –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è...")
        subprocess.run(["git", "checkout", "HEAD", "--", "modules/"])
        return False
    
    warnings = count_warnings()
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {warnings} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
    
    # –ö–æ–º–º–∏—Ç–∏–º
    subprocess.run(["git", "add", "modules/"])
    subprocess.run(["git", "commit", "-m", f"fix: {description}\\n\\nWarnings: {warnings}"])
    
    return True

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
print("üõ°Ô∏è –£–ª—å—Ç—Ä–∞-–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è JSON API")

initial = count_warnings()
print(f"üìä –ù–∞—á–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {initial}")

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–∞–º–µ–Ω—ã –ø–æ –æ–¥–Ω–æ–π
safe_fixes = [
    # –¢–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç–µ–π—à–∏–µ –∑–∞–º–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–π —Å–æ–∑–¥–∞–Ω–∏—è
    ('s/json_object_new_object()/dap_json_object_new()/g', 
     'Replace json_object_new_object with dap_json_object_new'),
    
    ('s/json_object_new_array()/dap_json_array_new()/g',
     'Replace json_object_new_array with dap_json_array_new'),
     
    # –ó–∞–º–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–π –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
    ('s/json_object_put(/dap_json_object_free(/g',
     'Replace json_object_put with dap_json_object_free'),
     
    ('s/json_object_free(/dap_json_object_free(/g',
     'Replace json_object_free with dap_json_object_free'),
     
    # –ó–∞–º–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–π –º–∞—Å—Å–∏–≤–æ–≤
    ('s/json_object_array_add(/dap_json_array_add(/g',
     'Replace json_object_array_add with dap_json_array_add'),
]

success_count = 0
for pattern, description in safe_fixes:
    if safe_replace(pattern, description):
        success_count += 1
    else:
        break

final = count_warnings()
print(f"\nüèÅ –£–ª—å—Ç—Ä–∞-–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
print(f"üìä {initial} ‚Üí {final} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–º–µ–Ω: {success_count}/{len(safe_fixes)}")
print(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {initial - final} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
